router calls template from .config

-----NESTED VIEWS / DIRECTIVE STRUCTURE-----

wrapper
	canvas wrapper
		canvas
		chat
			scroll
		copyright
	left wrapper
		timer
		landscapes
			scroll
		scores
	right wrapper
		brushes
		scrolL

----------------DATASTRUCTURE----------------
users
	user1:bob  //function to add users, receives last userID from FBO and increments for new user
		teamID
	user1:steve
		teamID
chat-message
	UserId
	Time from activeArtist

cursor-status
	color
	userMouseDown
	x
	y
	userID //future
team
	roomID
rooms
roomID		//future

		game-owner //game owner determines active users switching funcitons, has access to the begin game controls, etc.
		active-user  //feeds everyone the active user, determines who can draw and who listens, who can chat, who's timer is feeding to others, etc.
		landscape	//permissions or functions to grant one user to alter at a time.
		cursor-status ////permissions or functions to grant one user to alter at a time.
			x
			y
			color
			brushes
			user

		team1ID: array of users
			score
		team2ID: array of users
			score
		chat
			/user
			/message
			/timer-status
		timer
			time






			/*
			 * Auth
			 */

			// create user from firebasecode
			 var ref = new Firebase("https://<YOUR-FIREBASE-APP>.firebaseio.com");
			 ref.createUser({
			   email    : "bobtony@firebase.com",
			   password : "correcthorsebatterystaple"
			 }, function(error, userData) {
			   if (error) {
			     console.log("Error creating user:", error);
			   } else {
			     console.log("Successfully created user account with uid:", userData.uid);
			   }
			 });


			 //logging users in
			 var ref = new Firebase("https://<YOUR-FIREBASE-APP>.firebaseio.com");
			ref.authWithPassword({
			  email    : "bobtony@firebase.com",
			  password : "correcthorsebatterystaple"
			}, function(error, authData) {
			  if (error) {
			    console.log("Login Failed!", error);
			  } else {
			    console.log("Authenticated successfully with payload:", authData);
			  }
			});


			// delete a user
			var ref = new Firebase("https://<YOUR-FIREBASE-APP>.firebaseio.com");
			ref.removeUser({
			  email    : "bobtony@firebase.com",
			  password : "correcthorsebatterystaple"
			}, function(error) {
			  if (error === null) {
			    console.log("User removed successfully");
			  } else {
			    console.log("Error removing user:", error);
			  }
			});






			var firebaseRoot = "https://blazing-inferno-1647.firebaseio.com//",
			  ref = new Firebase(firebaseRoot),
			  authObj = $firebaseAuth(ref);
			// Assign authObj to scope for inline calls in the view
			$scope.authObj = authObj;
			// Use $onAuth listener to keep $scope.authData synced. Also sync scope.user.
			authObj.$onAuth(function(authData) {
			  $scope.authData = authData;
			  if (authData) { // Set up user object if authData present
			    var userRef = new Firebase(firebaseRoot + '/users/' + authData.uid),
			      user = $firebaseObject(userRef);
			    user.$loaded().then(function(user) { // Wait for user to be loaded before setting user details
			      user.lastLogin = new Date().toString();
			      user.$save();
			      user.$bindTo($scope, 'user');
			      if (user.birthday) {
			        $scope.birthday = new Date(user.birthday);
			      }
			    });
			  }
			});
			$scope.login = function(user) {
			  authObj.$authWithPassword(user).then(function(authData) {
			    console.log('login authData', authData);
			  }, function(error) {
			    alert(error);
			  });
			};
			$scope.register = function(user) {
			  authObj.$createUser(user).then(function(userData) {
			    console.log('login userData', userData);
			    $scope.login(user);
			  }, function(error) {
			    alert(error);
			  });
			};
			$scope.reset = function(user) {
			  authObj.$resetPassword({
			    email: user.email
			  }).then(function() {
			    alert('Success! Password reset email sent.');
			  }, function(error) {
			    alert('Error! ' + JSON.stringify(error));
			  });
			};
			$scope.changePassword = function(email, oldPassword, newPassword, newPasswordConfirmed) {
			  if (newPassword !== newPasswordConfirmed) {
			    alert('Passwords do not match!');
			  } else {
			    authObj.$changePassword({
			      email: email,
			      oldPassword: oldPassword,
			      newPassword: newPassword
			    }).then(function() {
			      alert('success!');
			    }, function(error) {
			      alert('Failure! ' + JSON.stringify(error));
			    });
			  }
			};
			$scope.googlePlus = function() {
			  authObj.$authWithOAuthPopup('google');
			};
			/*
			 * Users
			 */
			var usersRef = new Firebase(firebaseRoot + "/users");
			var users = $firebaseArray(usersRef);
			$scope.users = users;
			$scope.addUser = function(user) {
			  users.$add(user);
			};
			$scope.setBirthday = function(birthday) {
			  if ($scope.user) {
			    if (birthday) {
			      $scope.user.birthday = birthday.toString();
			    } else {
			      delete $scope.birthday;
			    }
			  }
			};
